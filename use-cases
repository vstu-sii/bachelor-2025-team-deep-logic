# D2 – USE-CASE NARRATIVE

**Цель:** Детальное описание пользовательских сценариев с альтернативными путями.

## Happy Path (основной успешный сценарий)

**Цель:** получить рецепт на основе имеющихся ингредиентов и предпочтений.

**Предусловие:** Пользователь открыл главный экран сайта.

1. **Действие пользователя:** Пользователь загружает одну или несколько фотографий ингредиентов через интерфейс загрузки и опционально заполняет поля "Время приготовления", "Сложность" и "Калорийность".
2. **Действие системы:** Система выполняет валидацию:
   a. Проверяет, что загружена хотя бы одна фотография.
3. **Действие системы:** Система отправляет POST запрос на сервер, содержащий фото ингредиентов.
4. **Действие системы:** Сервер возвращает ответ 200 OK с названиями ингредиентов.
5. **Действие системы:** Система отображает поле с ингредиентов.
6. **Действие системы:** Система предлагает пользователю удалить ингредиенты из поля с продуктами если они были указаны в ограничения и ждет подтверждения пользователя
7. **Действие пользователя:** Пользователь нажимает кнопку "Сформировать рецепт".
8. **Действие системы:** Система выполняет валидацию:
   a. Проверяет, что введенные предпочтения (если есть) имеют корректный формат (выбран вариант из списка для времени, сложности и для калорийности) и система определила ингредиенты.
9. **Действие системы:** Система отправляет POST запрос на сервер, содержащий список ингредиентов и предпочтения пользователя.
10. **Действие системы:** Сервер возвращает ответ 200 OK с данными рецепта (название, ингредиенты, пошаговая инструкция).
11. **Действие системы:** Система отображает экран с детализированным рецептом, пошаговой инструкцией.

## Alternative Flows (альтернативные сценарии)

**Цель:** AI анализирует ингредиенты и предлагает рецепты с пошаговыми инструкциями.

### При сетевой ошибке:
1. **Действие системы:** Система пытается отправить POST запрос на сервер.
2. **Альтернативное действие системы:** Запрос завершается с ошибкой (TypeError: Failed to fetch). Таймаут соединения истекает.
3. **Действие системы:** Система отображает понятное сообщение об ошибке.

### Обработка неверных или нераспознанных данных (Invalid Input):
1. **Альтернативное действие системы:** CV-модель не может распознать ни один ингредиент на загруженных фотографиях (низкая уверенность или неизвестный объект).
   - **Действие системы:** Система показывает сообщение: "Не удалось распознать ингредиенты. Пожалуйста, убедитесь, что фотография четкая, и попробуйте еще раз или введите ингредиенты вручную." Предлагается кнопка "Ввести вручную".

## Error Handling (обработка ошибок)

### Превышение лимитов (Limit Exceeded):
1. **Тип ошибки:** 429 Too Many Requests.
2. **Возможные причины:** Пользователь отправляет слишком много запросов подряд (DDoS-подобное поведение).
3. **Логика обработки:**
   - Сервер отклоняет запрос и возвращает статус 429 с заголовками (например, Retry-After указывает, через сколько секунд можно повторить запрос) или телом ответа с описанием лимита.
4. Клиент обрабатывает этот специфический статус.
5. **Реакция UI (User Interface):**
   - Отображается специальное уведомление.
6. **Сообщение для пользователя:**
   - Для 429: "Слишком много запросов! Пожалуйста, попробуйте через [N] секунд.".

### Технический сбой на сервере (Technical Failure):
**Тип ошибки:** 5xx Server Error, Timeout.
1. **Возможные причины:** Сбой на сервере, превышение таймаута запроса.
2. **Логика обработки:**
   - Клиент ловит исключение (для сетевой ошибки) или получает HTTP-статус 5xx.
   - Не предпринимается повторных попыток отправки автоматически (если это не Timeout, где можно сделать 1-2 retry).
   - Система переходит в состояние "ошибка".
3. **Реакция UI (User Interface):**
   - Отображается полноэкранное или модальное уведомление (Toast/Banner) с понятным сообщением.
   - **Сообщение для пользователя:** "Произошла внутренняя ошибка сервера. Мы уже знаем о проблеме и работаем над ее решением. Пожалуйста, попробуйте еще раз через несколько минут."

### Слишком большой объем данных (Request Entity Too Large)
**Тип ошибки:** 413 Payload Too Large
1. **Возможные причины:** Пользователь загрузил слишком много фотографий высокого разрешения или одно очень тяжелое изображение, превысив лимит размера запроса, установленный на сервере.
2. **Логика обработки:**
   - Сервер отклоняет запрос и возвращает статус 413 Payload Too Large.
   - Клиент обрабатывает этот статус.
3. **Реакция UI (User Interface):**
   - Отображается уведомление с понятным объяснением и решением.
   - **Сообщение для пользователя:** "Загруженные изображения слишком большого размера. Пожалуйста, выберите меньшее количество фото или уменьшите их разрешение."

## User Value (ценность для пользователя)

**Таблица 1 – ценность каждого сценария**

| Сценарий                  | Ключевая ценность для пользователя                                                                                             |
| ------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |
| Happy Path                | Скорость, удобство и решение проблемы — быстро получить релевантный рецепт без усилий.                                         |
| Сетевая ошибка            | Ясность и контроль — понимание причины сбоя и простой способ его исправить.                                                    |
| Некорректные данные       | Обучение и эффективность — мгновенная обратная связь, которая учит правильно использовать сервис и экономит время.             |
| Превышение лимитов        | Прозрачность — четкое понимание правил работы сервиса и когда можно будет продолжить.                                           |
| Технический сбой          | Доверие — уверенность в том, что разработчики контролируют ситуацию и работают над решением проблемы.                          |
| Слишком большой объем данных | Пользователь получает конкретное руководство к действию, а не непонятную ошибку. Он понимает, как исправить проблему (уменьшить размер/количество фото), чтобы продолжить работу. |

## Use-case UML диаграммы

![UML диаграммы](Рис. 1 – UML диаграммы действий happy path и Alternative Flows)

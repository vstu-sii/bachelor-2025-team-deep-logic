openapi: 3.0.3
info:
  title: AI Personal Chef API
  description: API для приложения кулинарного помощника с AI
  version: 1.0.0
  contact:
    name: API Support
    email: support@aichef.com

servers:
  - url: https://api.aichef.com/v1
    description: Production server
  - url: https://staging-api.aichef.com/v1
    description: Staging server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  schemas:
    User:
      type: object
      required:
        - email
        - login
      properties:
        id_user:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        login:
          type: string
          example: "chef_lover"
        password_hash:
          type: string
          readOnly: true
          example: "$2b$10$hashedpasswordstring"
        preferences_time:
          type: integer
          example: 1
        preferences_difficulty:
          type: integer
          example: 2
        preferences_calorie:
          type: integer
          example: 3
        created_at:
          type: string
          format: date-time

    UserRegistration:
      type: object
      required:
        - email
        - login
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        login:
          type: string
          example: "chef_lover"
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          example: "SecurePass123!"
        preferences_time:
          type: integer
          example: 1
        preferences_difficulty:
          type: integer
          example: 2
        preferences_calorie:
          type: integer
          example: 3

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "SecurePass123!"

    UserProfile:
      type: object
      properties:
        login:
          type: string
        preferences_time:
          type: integer
        preferences_difficulty:
          type: integer
        preferences_calorie:
          type: integer

    PasswordChange:
      type: object
      required:
        - current_password
        - new_password
      properties:
        current_password:
          type: string
          format: password
          minLength: 8
          maxLength: 128
        new_password:
          type: string
          format: password
          minLength: 8
          maxLength: 128

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    CookingTime:
      type: object
      properties:
        id_cooking_time:
          type: integer
        title:
          type: string
          example: "быстро"

    Difficulty:
      type: object
      properties:
        id_difficulty:
          type: integer
        title:
          type: string
          example: "Легко"

    CalorieContent:
      type: object
      properties:
        id_calorie_content:
          type: integer
        title:
          type: string
          example: "Низкокалорийное"

    Product:
      type: object
      properties:
        id_product:
          type: integer
        title:
          type: string
          example: "Помидор"

    Recipe:
      type: object
      properties:
        id_recipes:
          type: integer
        title:
          type: string
          example: "Спагетти Карбонара"
        description:
          type: string
        id_cooking_time:
          type: integer
        id_difficulty:
          type: integer
        id_calorie_content:
          type: integer
        cooking_time:
          $ref: '#/components/schemas/CookingTime'
        difficulty:
          $ref: '#/components/schemas/Difficulty'
        calorie_content:
          $ref: '#/components/schemas/CalorieContent'
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductInRecipe'
        created_at:
          type: string
          format: date-time

    ProductInRecipe:
      type: object
      properties:
        id_product:
          type: integer
        title:
          type: string
        

    ProductsInProhibited:
      type: object
      properties:
        id:
          type: integer
        id_product:
          type: integer
        id_user:
          type: integer
        product:
          $ref: '#/components/schemas/Product'

    History:
      type: object
      properties:
        id_history:
          type: integer
        id_user:
          type: integer
        id_recipes:
          type: integer
        favorite:
          type: boolean
        done:
          type: boolean
        rating:
          type: integer
          minimum: 1
          maximum: 5
        time:
          type: string
          format: date-time
        recipe:
          $ref: '#/components/schemas/Recipe'

    Comment:
      type: object
      properties:
        id_comment:
          type: integer
        id_user:
          type: integer
        id_recipes:
          type: integer
        comment:
          type: string
        created_at:
          type: string
          format: date-time
        user_login:
          type: string

    ImageRecognitionRequest:
      type: object
      required:
        - image_base64
      properties:
        image_base64:
          type: string
          description: "Base64 encoded image"
        image_type:
          type: string
          enum: [jpeg, png, webp]
          default: "jpeg"

    ImageRecognitionResponse:
      type: object
      properties:
        recognized_products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        session_id:
          type: string
          description: "ID сессии для последующих запросов с этим набором продуктов"

    RecipeGenerationRequest:
      type: object
      required:
        - product_ids
      properties:
        product_ids:
          type: array
          items:
            type: integer
          description: "IDs продуктов для генерации рецептов"
        excluded_product_ids:
          type: array
          items:
            type: integer
          description: "IDs продуктов для исключения"
        preferences_time:
          type: integer
        preferences_difficulty:
          type: integer
        preferences_calorie:
          type: integer

    LLMInteraction:
      type: object
      properties:
        id_interaction:
          type: integer
        id_user:
          type: integer
        prompt_text:
          type: string
        response_text:
          type: string
        model_used:
          type: string
        tokens_used:
          type: integer
        interaction_type:
          type: string
          enum: [recipe_generation, recipe_modification, nutrition_advice, other]
        created_at:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: integer
        details:
          type: object
          description: "Дополнительная информация об ошибке"

    PasswordStrengthError:
      type: object
      properties:
        error:
          type: string
          example: "WEAK_PASSWORD"
        message:
          type: string
          example: "Пароль не соответствует требованиям безопасности"
        requirements:
          type: array
          items:
            type: string
          example: ["Минимум 8 символов", "Как минимум одна цифра", "Как минимум одна заглавная буква"]

paths:
  # UC1 - Регистрация
  /auth/register:
    post:
      summary: Регистрация нового пользователя
      description: |
        UC1 - Создание нового аккаунта пользователя.
        
        **Безопасность паролей:**
        - Пароль хешируется с использованием bcrypt перед сохранением
        - Минимальная длина пароля: 8 символов
        - Рекомендуется использовать цифры, заглавные и строчные буквы
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
            examples:
              validRegistration:
                summary: Валидная регистрация
                value:
                  email: "user@example.com"
                  login: "chef_lover"
                  password: "SecurePass123!"
                  preferences_time: 1
                  preferences_difficulty: 2
                  preferences_calorie: 3
      responses:
        '201':
          description: Пользователь успешно зарегистрирован и авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Некорректные данные или слабый пароль
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Error'
                  - $ref: '#/components/schemas/PasswordStrengthError'
        '409':
          description: Пользователь с таким email уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC2 - Вход в систему
  /auth/login:
    post:
      summary: Вход в систему
      description: |
        UC2 - Аутентификация пользователя.
        
        **Процесс аутентификации:**
        1. Поиск пользователя по email
        2. Сравнение хеша введенного пароля с хешем в базе данных
        3. Генерация JWT токена при успешной проверке
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            examples:
              validLogin:
                summary: Валидные учетные данные
                value:
                  email: "user@example.com"
                  password: "SecurePass123!"
      responses:
        '200':
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Сервис аутентификации недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC4 - Управление профилем
  /user/profile:
    get:
      summary: Получение профиля пользователя
      description: UC4 - Получение данных профиля
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Данные профиля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      summary: Обновление профиля пользователя
      description: UC4 - Изменение данных профиля
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
      responses:
        '200':
          description: Данные успешно обновлены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Некорректные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Смена пароля
  /user/change-password:
    post:
      summary: Смена пароля пользователя
      description: |
        Изменение пароля пользователя.
        
        **Процесс смены пароля:**
        1. Проверка текущего пароля
        2. Хеширование нового пароля
        3. Обновление хеша в базе данных
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '200':
          description: Пароль успешно изменен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Пароль успешно изменен"
        '400':
          description: Новый пароль не соответствует требованиям безопасности
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordStrengthError'
        '401':
          description: Неверный текущий пароль
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка при обновлении пароля
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC3 и UC9 - История и избранное
  /user/history:
    get:
      summary: Получение истории рецептов
      description: UC3 - Просмотр истории действий
      tags:
        - History
      security:
        - bearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [all, cooked, viewed]
          description: Тип истории для фильтрации
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Список истории
          content:
            application/json:
              schema:
                type: object
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/History'
                  total:
                    type: integer
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/favorites:
    get:
      summary: Получение избранных рецептов
      description: UC9 - Просмотр избранных рецептов
      tags:
        - Favorites
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Список избранных рецептов
          content:
            application/json:
              schema:
                type: object
                properties:
                  favorites:
                    type: array
                    items:
                      $ref: '#/components/schemas/History'
                  total:
                    type: integer
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC10 - Добавление в избранное
  /recipes/{recipe_id}/favorite:
    post:
      summary: Добавление рецепта в избранное
      description: UC10 - Добавление в избранное
      tags:
        - Favorites
      security:
        - bearerAuth: []
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Рецепт добавлен в избранное
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Рецепт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Удаление рецепта из избранного
      description: Удаление из избранного
      tags:
        - Favorites
      security:
        - bearerAuth: []
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Рецепт удален из избранного
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC5 - Распознавание ингредиентов по фото
  /ai/recognize-ingredients:
    post:
      summary: Распознавание ингредиентов на изображении
      description: UC5 - Запрос списка рецептов по соответствующим ингредиентам
      tags:
        - AI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageRecognitionRequest'
      responses:
        '200':
          description: Ингредиенты успешно распознаны
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageRecognitionResponse'
        '400':
          description: Неверный формат изображения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '408':
          description: Таймаут распознавания
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Ошибка ML-модели
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC6 - Генерация рецептов
  /ai/generate-recipes:
    post:
      summary: Генерация рецептов по ингредиентам
      description: UC6 - Исключение ингредиентов и генерация рецептов
      tags:
        - AI
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeGenerationRequest'
      responses:
        '200':
          description: Рецепты успешно сгенерированы
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Recipe'
        '400':
          description: Недостаточно ингредиентов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Не найдено подходящих рецептов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC7 - Получение деталей рецепта
  /recipes/{recipe_id}:
    get:
      summary: Получение детальной информации о рецепте
      description: UC7 - Выбор рецепта
      tags:
        - Recipes
      security:
        - bearerAuth: []
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Детали рецепта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '404':
          description: Рецепт не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # UC8 - Оставление отзыва
  /recipes/{recipe_id}/comments:
    post:
      summary: Добавление комментария к рецепту
      description: UC8 - Оставление отзыва
      tags:
        - Comments
      security:
        - bearerAuth: []
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
                - rating
              properties:
                comment:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
      responses:
        '201':
          description: Комментарий успешно добавлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Неверные данные комментария
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Не авторизован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Дополнительные endpoints для управления запрещенными продуктами
  /user/prohibited-products:
    get:
      summary: Получение списка запрещенных продуктов
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список запрещенных продуктов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductsInProhibited'
        '401':
          description: Не авторизован

    post:
      summary: Добавление запрещенного продукта
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
              properties:
                product_id:
                  type: integer
      responses:
        '201':
          description: Продукт добавлен в запрещенные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsInProhibited'
        '401':
          description: Не авторизован

  /user/prohibited-products/{product_id}:
    delete:
      summary: Удаление продукта из запрещенных
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Продукт удален из запрещенных
        '401':
          description: Не авторизован
        '404':
          description: Продукт не найден в запрещенных

  # Отметка рецепта как приготовленного
  /recipes/{recipe_id}/mark-cooked:
    post:
      summary: Отметка рецепта как приготовленного
      tags:
        - History
      security:
        - bearerAuth: []
      parameters:
        - name: recipe_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Рецепт отмечен как приготовленный
        '401':
          description: Не авторизован
        '404':
          description: Рецепт не найден

import json
import os
import re
import requests
from dotenv import load_dotenv
from ml.models.baseline import MistralText

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
load_dotenv()
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
MISTRAL_URL = "https://api.mistral.ai/v1/chat/completions"
MISTRAL_MODEL = "mistral-medium"

llm = MistralText()

def clean_mistral_output(output: str) -> str:
    if not isinstance(output, str):
        return ""

    # —É–±–∏—Ä–∞–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É
    clean = re.sub(r"^```(?:json)?", "", output.strip(), flags=re.IGNORECASE | re.MULTILINE)
    clean = re.sub(r"```$", "", clean.strip(), flags=re.MULTILINE)

    # —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–∏—Å—ã –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
    clean = re.sub(r"\n\s*-\s*\n", "\n", clean)
    clean = re.sub(r"^\s*-\s*{", "{", clean, flags=re.MULTILINE)

    # —É–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (ASCII 0‚Äì31 –∏ 127)
    clean = re.sub(r'[\x00-\x1f\x7f]', ' ', clean)

    # –æ–±—Ä–µ–∑–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
    end = clean.rfind("}")
    if end != -1:
        clean = clean[:end+1]

    return clean.strip()



def check_with_mistral(recipes, dietary):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ Mistral (–¥–∏–µ—Ç–∞ + —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)."""
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }

    prompt = (
        "–¢—ã –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ Markdown.\n\n"
        f"–†–µ—Ü–µ–ø—Ç—ã (JSON):\n{json.dumps(recipes, ensure_ascii=False, indent=2)}\n\n"
        f"–î–∏–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {dietary or '–Ω–µ—Ç'}\n\n"
        "–ü—Ä–æ–≤–µ—Ä—å:\n"
        "1) –ù–µ—Ç –ª–∏ –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.\n"
        "   –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ '–ª–∞–∫—Ç–æ–∑–∞', —Ç–æ –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.\n"
        "2) –ï—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤—Å–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –ª–µ–≥–∫–æ–µ, —Å—Ä–µ–¥–Ω–µ–µ, —Å–ª–æ–∂–Ω–æ–µ.\n\n"
        "–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º—ã:\n"
        "{\n"
        '  "dietary_ok": true,\n'
        '  "difficulty_ok": true\n'
        "}\n"
    )

    payload = {
        "model": MISTRAL_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JSON."},
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.1,
        "max_tokens": 256,
    }

    response = requests.post(MISTRAL_URL, headers=headers, json=payload, timeout=60)
    if response.status_code != 200:
        return {"error": f"Mistral API error: {response.status_code}", "details": response.text}

    data = response.json()
    content = (
        data.get("choices", [{}])[0]
        .get("message", {})
        .get("content", "")
        .strip()
    )

    if not content:
        return {"error": "Empty response content from Mistral"}

    cleaned = clean_mistral_output(content)
    try:
        parsed = json.loads(cleaned)
    except Exception as e:
        return {"error": f"Invalid JSON from Mistral: {e}", "raw_output": content, "cleaned": cleaned}

    return {
        "dietary_ok": bool(parsed.get("dietary_ok", False)),
        "difficulty_ok": bool(parsed.get("difficulty_ok", False)),
    }

def run_tests(report_file="recipes_test_report.txt"):
    tests_path = os.path.join("ml", "evaluation", "test_recipes.json")
    with open(tests_path, "r", encoding="utf-8") as f:
        test_cases = json.load(f)

    total = len(test_cases)
    passed_both = 0
    passed_diet = 0
    passed_diff = 0
    lines = []

    for idx, case in enumerate(test_cases, start=1):
        print(f"\n‚ñ∂Ô∏è –¢–µ—Å—Ç {idx}: –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã={case['ingredients']}, –¥–∏–µ—Ç–∞={case['dietary']}")
        recipes = llm.generate_recipe(
            case["ingredients"],
            dietary=case.get("dietary", "–Ω–µ—Ç"),
            feedback=case.get("user_feedback", "–Ω–µ—Ç")
        )

        if isinstance(recipes, dict) and "error" in recipes:
            result_line = f"–¢–µ—Å—Ç {idx}: ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({recipes})"
            print("  " + result_line)
            lines.append(result_line)
            continue

        check_result = check_with_mistral(recipes, case.get("dietary", "–Ω–µ—Ç"))

        if "error" in check_result:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_result}")
            lines.append(f"–¢–µ—Å—Ç {idx}: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_result}")
            continue

        dietary_ok = check_result.get("dietary_ok", False)
        difficulty_ok = check_result.get("difficulty_ok", False)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏
        if dietary_ok:
            passed_diet += 1
        if difficulty_ok:
            passed_diff += 1
        if dietary_ok and difficulty_ok:
            passed_both += 1

        print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–µ—Ç—ã: {'‚úÖ' if dietary_ok else '‚ùå'}")
        print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: {'‚úÖ' if difficulty_ok else '‚ùå'}")

        lines.append(f"–¢–µ—Å—Ç {idx}:")
        lines.append(f"  –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {case['ingredients']}")
        lines.append(f"  –î–∏–µ—Ç–∞: {case.get('dietary', '–Ω–µ—Ç')}")
        lines.append(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–µ—Ç—ã: {'OK' if dietary_ok else 'FAIL'}")
        lines.append(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π: {'OK' if difficulty_ok else 'FAIL'}")

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ü–µ–ø—Ç—ã
        lines.append("  –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:")
        for r in recipes:
            lines.append(f"    - {r.get('name', '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            if "ingredients" in r:
                ingr_list = ", ".join(i.get("name", "") for i in r["ingredients"])
                lines.append(f"      –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {ingr_list}")
            if "difficulty" in r:
                lines.append(f"      —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {r['difficulty']}")
        lines.append("")


    # —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
    percent_diet = (passed_diet / total) * 100 if total else 0.0
    percent_diff = (passed_diff / total) * 100 if total else 0.0
    percent_both = (passed_both / total) * 100 if total else 0.0

    summary = (
        f"üìä –ò—Ç–æ–≥ –ø–æ {total} —Ç–µ—Å—Ç–∞–º:\n"
        f"  ‚úÖ –î–∏–µ—Ç–∞: {passed_diet}/{total} ({percent_diet:.1f}%)\n"
        f"  ‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç–∏: {passed_diff}/{total} ({percent_diff:.1f}%)\n"
        f"  ‚úÖ –û–±–∞ —É—Å–ª–æ–≤–∏—è: {passed_both}/{total} ({percent_both:.1f}%)"
    )

    print("\n" + summary)
    lines.append(summary)

    with open(report_file, "w", encoding="utf-8") as f:
        f.write("\n".join(lines))


if __name__ == "__main__":
    run_tests()
